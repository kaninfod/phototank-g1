.box.box-primary
  .box-header.with-border
    %h3.box-title Pick location

    .box-body
      %input#pac-input.controls{:type=>"text", :placeholder=>"Search Box"}
      .col-lg-8#map{:style=>"height: 400px; width: 65%;"}
      .col-lg-4
        #spinner.h4
        #address_block{:style=>'display: none'}
          %dl.dl-horizontal.pull-left
            %dt Country
            %dd#country

            %dt City
            %dd#city

            %dt Address
            %dd#address
          %a.btn.btn-default.pull-right#add_location{:href=>"#{@return_url}", :role=>"button"} Add Location



:javascript
  $(document).ready(function(){

    localStorage.setItem("location", null);
    var markers = [];

    // Initialize map
    var map = new google.maps.Map(document.getElementById('map'), {
      zoom: 14,
      center: new google.maps.LatLng(55.68,12.586),
      mapTypeId: google.maps.MapTypeId.ROADMAP
    });
    centerMap()

    // Create the search box and link it to the UI element.
    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function() {
      searchBox.setBounds(map.getBounds());
    });

    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener('places_changed', function() {
      var places = searchBox.getPlaces();

      if (places.length == 0) {
        return;
      }

      // Clear out the old markers.
      markers.forEach(function(marker) {
        marker.setMap(null);
      });
      markers = [];

      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();
      places.forEach(function(place) {
        var icon = {
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25)
        };

        // Create a marker for each place.
        markers.push(new google.maps.Marker({
          map: map,
          icon: icon,
          title: place.name,
          position: place.geometry.location
        }));

        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
      });
      map.fitBounds(bounds);
    });

    function centerMap() {
      // Center map on clients current location
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
          var pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          console.log(pos)
          map.setCenter(pos);
        });
      }
    }


    // Sets the map on all markers in the array.
    function setMapOnAll(map) {
      for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(map);
      }
    }

    // Removes the markers from the map, but keeps them in the array.
    function clearMarkers() {
      setMapOnAll(null);
    }

    // add marker to map
    function addMarker(position) {
      marker = new google.maps.Marker({
        position: position,
        map: map
      });
      markers.push(marker)
    }

    // get address from GEOCODER
    function get_location(lat, lng) {
      $("#spinner").html("Loading...");
      $.ajax({
        url: "/locations/new_from_coordinate_string",
        data: {latitude: lat, longitude: lng},
        success: function(response, request) {
          $("#country").html(response.country);
          $("#city").html(response.city);
          $("#address").html(response.address);
          localStorage.setItem("location", JSON.stringify(response));
          $("#spinner").html("");
          $('#address_block').show()
        },
        error: function(e) { console.log(e)}
      });
    }

    // add location to DB
    $("#add_location").on("click", function() {
      data = JSON.parse(localStorage.getItem("location"))
      if (data != null) {
        $.ajax({
          url: "/locations/create",
          data: data,
          success: function(response, request) {
            console.log(response)
            localStorage.setItem("location", null);
          },
          error: function(e) { console.log(e)}
        });
      }
    })

    // Event listner for click events on map
    map.addListener('click', function(e) {
      $('#address_block').hide()
      clearMarkers()
      addMarker(e.latLng)
      get_location(e.latLng.lat(), e.latLng.lng())
    });

  })


:css
  .controls {
    margin-top: 10px;
    border: 1px solid transparent;
    border-radius: 2px 0 0 2px;
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    height: 32px;
    outline: none;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
  }

  #pac-input {
    background-color: #fff;
    font-family: Roboto;
    font-size: 15px;
    font-weight: 300;
    margin-left: 12px;
    padding: 0 11px 0 13px;
    text-overflow: ellipsis;
    width: 300px;
  }

  #pac-input:focus {
    border-color: #4d90fe;
  }

  .pac-container {
    font-family: Roboto;
  }

  #type-selector {
    color: #fff;
    background-color: #4d90fe;
    padding: 5px 11px 0px 11px;
  }

  #type-selector label {
    font-family: Roboto;
    font-size: 13px;
    font-weight: 300;
  }
  #target {
    width: 345px;
  }
