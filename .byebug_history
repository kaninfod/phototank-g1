c
@catalog
n
@catalog
c
n
params['import_action']
c
params['import_action']
c
params
c
params
c
params
c
redirect_to @catalog and return
c
redirect_to "/catalogs/show"
c
redirect_to "catalogs/show"
c
redirect_to "show"
c
redirect_to "catalogs/show"
c
d.photos
d=Catalog.find(params[:id])
Catalog.find(params[:id])
params[:id]
c
Photo.where{filename.eq("c0da7400300344f4c795226f58dcfcfeadef35d0197947086634a2924c52f535") }
Photo.where{filename.eq("c0da7400300344f4c795226f58dcfcfeadef35d0197947086634a2924c52f535") }.first.filename
Photo.where(filename: "cb3fd7808c01921839a71aa123601ad31500937ad92d3e2ad69c7872fa7686df")
Photo.where(filename: ""cb3fd7808c01921839a71aa123601ad31500937ad92d3e2ad69c7872fa7686df"")
Photo.where{filename.eq(self.filename) }.first.filename
Photo.where{filename.eq(self.filename) }
Photo.where(filename: self.filename)
self.filename
Photo.where{filename.eq(self.filename) }
Photo.where{filename.eq(self.filename) & date_taken.eq(self.date_taken)}
Photo.where{filename.eq(self.filename) | date_taken.eq(self.date_taken)}
Photo.where{filename.eq(self.filename) & date_taken.eq(self.date_taken)}
existing_photo.present?
self.filename
existing_photo
existing_photo.present?
n
existing_photo.present?
self.filename
existing_photo.present?
c
existing_photo.present?
c
n
existing_photo.present?
existing_photo
n
c
n
c
n
c
existing_photo
n
c
n
existing_photo.present?
n
c
existing_photo.first.validate_files
existing_photo.present?
n
c
n
photo
n
photo.import_path
photo
n
photo
n
continue
q
c
n
c
n
c
FileUtils.cp self.import_path, File.join(_absolute_path_original, self.filename + self.file_extension)
FileUtils.cp self.import_path File.join(_absolute_path_original self.filename + self.file_extension)
File.join(_absolute_path_original, self.filename + self.file_extension)
self.import_path File.join(_absolute_path_original), self.filename + self.file_extension)
self.import_path File.join(_absolute_path_original, self.filename + self.file_extension)
FileUtils.cp self.import_path File.join(_absolute_path_original, self.filename + self.file_extension)
c
n
c
File.join(_absolute_path_original, self.filename + self.file_extension)
_absolute_path_original
self.import_path
c
sub_path
c
sub_path
subpath
n
c
n
self.resize_photo
resize_photo
c
self.resize_photo()
resize_photo
self.resize_photo
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
Catalog.master
self.catalogs
self.catalog(1)
self.catalog
self
self.catelog
n
c
n
c
n
c
self.date_taken
n
c
n
c
cc
n
c
h
n
c
n
image.signature
n
image
n
c
exif
c
n
self
n
c
exif.datetimeoriginal.blank?
exif
exif = MiniExiftool.new(self.import_path, opts={:numerical=>true})
self.import_path
c
n
c
self
p
n
c
Album.where{name=~"%May%"}c
Album.where{name=~"%May%"}
Album.where{name=~"May%"}
Album.where{name=~"Mar%"}
Album.where{name=~"%"}
Album.where{name=~"Jan%"}
Album.where{name=~"Jan"}
Album.where{name=~query}
Album.where(name:~ query)
Album.where(name: query)
@albums.where(name: query)
query
n
c
query
n
query
n
query
c
params
query
n
query
n
query
c
n
c
albums.count
n
albums.count
album
albums
n
albums
n
flag
n
flag
n
flag
pry
disable
d
h
c
albums
c
albums
c
albums
c
albums
n
albums
c
albums
n
albums
n
albums
c
albums
c
albums
c
albums
c
albums
c
albums
c
q
albums
c
albums
c
albums
c
