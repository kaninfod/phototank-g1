c
n
c
similar_locations.count(:all)
similar_locations
@photo.nearbys(1).where.not(location_id: nil)
similar_locations.count
n
similar_locations.count
@photo.nearbys(1).where.not(location_id: nil)
c
@photo
e
n
@photo
k
k.longitude = 153.195555555556
k
k.longitude = 151.195555555556
k
k=Photo.new(photo)
Photo.new(photo)
photo
n
photo_obj
n
photo_obj
n
photo_obj
n
photo_obj
n
photo_obj
n
s
photo
n
c
photo
n
photo
n
photo_obj['longitude'].class
photo_obj['longitude']
n
photo_obj['longitude']
exif.gpslongitude.class
exif.gpslongitude
@photo
n
c
e
n
@photo
n
c
@photo
n
c
@photo
n
c
@photo
n
c
@photo
n
c
@photo
n
c
@photo
n
c
@photo
n
c
@photo
n
c
@photo
n
c
@photo
n
c
@photo
n
c
@photo
n
c
@photo
n
c
@photo
n
@photo
n
c
n
c
n
c
n
e
n
c
exception
e
n
c
n
c
n
c
@photo.catalogs.first.name
@photo.catalogs
@photo.instances
c
params.has_key?(:size)
params.has_key?[:size]
params
c
params
c
params
c
params
c
params
c
params
catalog_path
n
e
n
e
n
e
n
e
n
s
n
c
params
c
flash[:notice]
flash
notice
flash
c
value
n
c
n
c
params
c
request.parameters
s
:type
s
c
n
c
catalog_params
@catalog
n
params
c
params
c
n
s
n
response
n
s
n
e
n
response
n
s
n
e
n
response
n
s
src
dst
n
e
n
c
l.metadata(file_path_dropbox) 
l
l=login
e
n
repsonse
n
c
photo['id']
Photo.find(photo['id'])
n
c
self.get_predicate('id', self.photo_ids, :in) 
get_predicate('id', self.photo_ids, :in) 
n
c
get_predicate('id', self.photo_ids, :in) c
get_predicate('id', self.photo_ids, :in) 
self.get_predicate('id', self.photo_ids, :in) 
n
c
n
c
Catalog.master.first == self
self.path
self
Catalog.master == self
c
Catalog.master == self
Catalog.master = self
self
Catalog.master
not Catalog.master
not Catalog.master.exists?
not default?
n
c
n
c
Catalog.master.exists?
self.master.exists?
self.class
self
master.exists?
Catalog.master.exists?
Catalog.master
self.master
default
master
master.exists?
n
c
default?
c
exception
n
c
n
