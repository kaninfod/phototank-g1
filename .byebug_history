c
cc
c
e
n
c
n
e
c
n
c
n
c
n
c
n
c
n
identical_photos.count
n
c
self
e
n
identical_photos.count
identical_photos
n
import_file_path
n
path
c
n
import_path
c
n
self.watch_path.each do |import_path|
c
n
c
n
self.watch_path.each do |import_path|n
self.watch_path.each do 
self.watch_path.each do |import_path|
self.watch_path
self.watch_path.each do |import_path|
c
self.watch_path
import_path
path
n
c
path
self.watch_path
self.watch_path.count
n
self.watch_path.count
n
c
self.watch_path
path
n
self.watch_path
c
path
n
c
from_catalog_id
to_catalog_id
n
options(:to_catalog_id)
options["to_catalog_id"]
options
options[:from_catalog_id]
from_catalog_id
n
c
response["bytes"]
response
n
c
local_path
n
dropbox_path
photo.absolutepath
c
n
response
n
c
uploader.class
uploader.attrs
uploader["@upload_id"]
uploader.@upload_id
uploader.attributes
uploader
c
n
@offset
n
resp
n
resp
n
s
n
c
n
chunk_size
s
n
c
n
chunk_size
n
c
uploader.@total_size
uploader
c
n
uploadern
uploader
c
n
c
n
uploader.offset
local_file_size
uploader.total_size
uploader
chunk_size
c
params
c
params
c
params[:catalog][:type] 
params
c
params
c
authorize_url
authorize_url="https://www.dropbox.com/1/oauth2/authorize?client_id=knb2b9w893ilrlj&response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fcatalogs%2Fauthorize_callback&state=B0pEwdrHgTbf6pvdD%2BhoYA%3D%3D&catalog_id=5"
authorize_url=https://www.dropbox.com/1/oauth2/authorize?client_id=knb2b9w893ilrlj&response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fcatalogs%2Fauthorize_callback&state=B0pEwdrHgTbf6pvdD%2BhoYA%3D%3D&catalog_id=5
authorize_url
c
session.request
session.class
session
session["_csrf_token"]
session["dropbox_auth_csrf_token"]
session["asdfghytr"]
session.keys
session
flow.@csrf_token_session_key
flow
flow.@loaded
flow.attributes
flow.attrs
flow.class
flow.attrs
flow.attribute
flow.attributes
flow.class
flow.keys
flow.get_keys
flow
n
c
params
c
self.ext_store_data = self.ext_store_data.merge({"access_token" => new_access_token})c
self.ext_store_data
self.ext_store_data = self.ext_store_data.merge({"access_token" => new_access_token})
self.ext_store_data
self.ext_store_data.merge({"access_token" => new_access_token})
new_access_token
c
url_state
user_id
access_token
flow = DropboxOAuth2Flow.new(APP_KEY, APP_SECRET,REDIRECT_URI, session, :dropbox_auth_csrf_token)
c
exception
n
c
params
c
authorize_url
n
c
exception
n
c
n
c
params.has_key?(:album)
params.has_key?("album")
params.has_key("album")
params
params.has_key(:album)
params.require?(:album)
params.require?(:album))
params.require(:photo)
c
params
album_params
c
n
params
c
n
c
request.post?
params
c
e
n
c
self.filename
self.date_taken
n
c
self.import_path
self
self.id
exif.datetimeoriginal
n
exif.datetimeoriginal
n
exif.datetimeoriginal
exif.datetimeoriginal.blank?
exif
exif.datetimeoriginal.blank?
date_taken
existing_photo
n
c
phash_existing_photo.fingerprint
@phash.fingerprint
@phash.duplicate?(phash_existing_photo)
n
c
n
c
n
c
existing_photo.absolutepath
n
c
existing_photo.first.instances
Photo.where(date_taken: date_taken).instances
Photo.where(date_taken: date_taken)
Photo.find(6).instances
existing_photo
existing_photo.instances
existing_photo
