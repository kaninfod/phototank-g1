c
path
c
n
c
photo.absolutepath(self.id)
n
fu_list(list)
list
n
c
e
n
File.exist?(files[0])
files
c
k["count"]
k[:count]
k
c
e
n
session
c
n
File.exist?(photo.absolutepath(self.id))
photo.absolutepath(self.id)
hoto.absolutepath(self.id)
dst
src
n
use_resque
self.photos
self.instances
self.id
c
n
Catalog.find(53).instances
n
self.id
n
Catalog.find(52).instances
from_catalog_id
from_catalog_id'
Catalog.find(45).instances
c
Catalog.find(45).instances
Catalog.find(45)
from_catalog_id
c
self.instances
self
photos
c
albums
n
params
n
params
c
params
n
c
params
c
params
cparams
c
n
@absolute_path_original
e
n
@absolute_path_original
Catalog.master.path
self.catalogs
self.catalogs.where{id.eq(1)}.first
self.catalog(1).path
File.join(self.catalog(1).path, self.path, self.filename + self.file_extension)
Catalog.master.id
File.join(self.catalog(catalog_id).path, self.path, self.filename + self.file_extension)
self.absolutepath
dst
n
e
n
s
n
s
n
c
n
path
n
c
e
n
File.join(@absolute_path_original, self.filename + self.file_extension)
n
self.import_path
self.filename
@absolute_path_original
c
photo
c
photo.file_thumb_path
Catalog.master.id
photo
photo.original_filename
c
n
c
Resque.size(:local_sync)
c
Resque.size(:local_sync)
c
r
c
n
Resque.size(:import)
n
Resque.size(:import)
c
Resque.size(:import).to_s
n
c
n
File.exist?(path)
s
@catalog.watch_path[0]
@catalog.watch_path
File.exist?("/Users/martinhinge/rails_projects/phototank/test/test_files/import/path_a")
@catalog
path
n
c
n
Catalog.find(params[:id])
Catalog.all
params
c
@photo.send(:@date_path)
c
@photo
photo@
@photo.send(:photo_exist, @photo.filename, @photo.date_taken)
c
 @photo.send(:photo_exist, "","")
c
@photo.send(:photo_exist, "","")
@photo.send(:photo_exist())
@photo.send(:photo_exist'()')
@photo.send(:photo_exist())
@photo.send(:photo_exist)
@photo.send(:photo_exist("",""))
@photo
disrespect_privacy @photo do
disrespect_privacy @photo
c
n
c
e
n
@photo
c
continue
c
n
continue
c
src
File.exist?(photo.absolutepath(catalog_id))
File.exist?(dst)
src
c
src
dst
c
FileUtils.mkdir_p dst
FileUtils.cp src, dst
dst
src
n
src
n
File.join(Catalog.find(catalog_id).path, photo.path)
photo
n
q
c
n
c
n
c
photo.absolutepath(self.id)
c
photo.absolutepath(self.id)
c
n
c
n
no_loc.first
no_loc
n
@photo
c
Location.where{(latitude.eq(0) & longitude.eq(0))}
n
c
n
c
@catalog
n
@catalog
c
n
params['import_action']
c
params['import_action']
c
params
c
params
c
params
c
redirect_to @catalog and return
c
redirect_to "/catalogs/show"
c
redirect_to "catalogs/show"
c
redirect_to "show"
c
redirect_to "catalogs/show"
c
d.photos
d=Catalog.find(params[:id])
Catalog.find(params[:id])
params[:id]
c
Photo.where{filename.eq("c0da7400300344f4c795226f58dcfcfeadef35d0197947086634a2924c52f535") }
Photo.where{filename.eq("c0da7400300344f4c795226f58dcfcfeadef35d0197947086634a2924c52f535") }.first.filename
Photo.where(filename: "cb3fd7808c01921839a71aa123601ad31500937ad92d3e2ad69c7872fa7686df")
Photo.where(filename: ""cb3fd7808c01921839a71aa123601ad31500937ad92d3e2ad69c7872fa7686df"")
Photo.where{filename.eq(self.filename) }.first.filename
Photo.where{filename.eq(self.filename) }
Photo.where(filename: self.filename)
self.filename
Photo.where{filename.eq(self.filename) }
Photo.where{filename.eq(self.filename) & date_taken.eq(self.date_taken)}
Photo.where{filename.eq(self.filename) | date_taken.eq(self.date_taken)}
Photo.where{filename.eq(self.filename) & date_taken.eq(self.date_taken)}
existing_photo.present?
self.filename
existing_photo
existing_photo.present?
