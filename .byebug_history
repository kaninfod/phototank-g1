catalog_path
n
e
n
e
n
e
n
e
n
s
n
c
params
c
flash[:notice]
flash
notice
flash
c
value
n
c
n
c
params
c
request.parameters
s
:type
s
c
n
c
catalog_params
@catalog
n
params
c
params
c
n
s
n
response
n
s
n
e
n
response
n
s
n
e
n
response
n
s
src
dst
n
e
n
c
l.metadata(file_path_dropbox) 
l
l=login
e
n
repsonse
n
c
photo['id']
Photo.find(photo['id'])
n
c
self.get_predicate('id', self.photo_ids, :in) 
get_predicate('id', self.photo_ids, :in) 
n
c
get_predicate('id', self.photo_ids, :in) c
get_predicate('id', self.photo_ids, :in) 
self.get_predicate('id', self.photo_ids, :in) 
n
c
n
c
Catalog.master.first == self
self.path
self
Catalog.master == self
c
Catalog.master == self
Catalog.master = self
self
Catalog.master
not Catalog.master
not Catalog.master.exists?
not default?
n
c
n
c
Catalog.master.exists?
self.master.exists?
self.class
self
master.exists?
Catalog.master.exists?
Catalog.master
self.master
default
master
master.exists?
n
c
default?
c
exception
n
c
n
File.join(self.catalogs.where{id.eq(catalog_id)}.first.path, self.path, self.filename + self.file_extension)
self.file_extension
self.filename
self.path
self.catalogs.where{id.eq(catalog_id)}.first.path
catalog_id
c
n
no_loc
no.loc
n
e
n
c
Photo.find(4)
@photos[2]
@photos[1]
@photos[0]
@photos
n
@album
n
e
e.class
e.exception
e.inspect
e
c
n
new_location
n
c
e
n
if similar_locations.count
similar_locations.count
n
similar_locations.count
similar_locations
n
similar_locations.first.location
@photo.location
@photo
n
s
n
c
where
help
e
n
e
n
e
n
@photo
n
c
n
c
default_render
n
@photos.count
Catalog.find(params[:id]).photos
photos.count
n
c
n
photo
Photo.last
c
n
photo
n
e
n
catalog
photo
c
n
photo_obj
c
photo_obj
c
photo_obj
$redis.get(0)
c
where
d
h
c
cc
c
$redis.get(0)
c
b
c
$redis.get(0)
photo
photo_obj.to_json
p
photo_obj
photo_obj.to_json
c
p
$redis.set objid, photo_obj.to_json
photo_obj.to_json
p
n
c
n
JSON.parse($redis.get(2))
          photo.status = 1
c
n
 photo_obj
n
b
sub_path
n
e
n
photo_obj 
n
c
e.message
e
n
photo_obj 
n
c
e
n
